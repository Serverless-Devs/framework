<!doctype html>
<html>
  <head>
    <meta charset="UTF-8" />
    <!-- import CSS -->
    <link rel="stylesheet" href="https://unpkg.com/element-ui/lib/theme-chalk/index.css" />
  </head>

  <body style="background-color: rgb(245, 245, 245);padding: 16px 24px;">
    <div id="app">
      <el-row :gutter="20">
        <el-col :span="12">
          <div
            style="background-color: #fff;box-shadow: 0 1px 4px 0 rgb(0 0 0 / 13%);border: 1px solid transparent;padding: 0 16px;"
          >
            <h3>项目初始化</h3>
            <el-form
              ref="form"
              :model="form"
              :rules="rules"
              label-width="200px"
              label-position="top"
            >
              <template v-for="item in templateKeys">
                <div v-if="item.name === 'access'" :key="item.name">
                  <el-alert
                    v-if="accessList.length === 0"
                    title="您还未配置过密钥，您可以在终端里通过 s config add 进行添加，添加成功后刷新页面即可"
                    type="warning"
                    :closable="false"
                    style="margin-bottom: 22px;"
                  ></el-alert>
                  <el-form-item label="access" prop="access">
                    <el-select v-model="form.access" placeholder="请选择密钥" style="width: 100%;">
                      <el-option v-for="obj in accessList" :key="obj" :label="obj" :value="obj"></el-option>
                    </el-select>
                  </el-form-item>
                </div>
                <template v-else>
                  <el-form-item
                    :label="item.name"
                    :key="item.name"
                    :prop="item.name"
                    :rules="{ required: true, message: item.desc, trigger: 'change' }"
                  >
                    <el-input v-model="form[item.name]" :placeholder="item.desc"></el-input>
                  </el-form-item>
                </template>
              </template>
              <el-form-item>
                <el-button type="primary" @click="handleInit" :disabled="res.success">初始化</el-button>
              </el-form-item>
            </el-form>
          </div>
        </el-col>
        <el-col :span="12">
          <div
            style="background-color: #fff;box-shadow: 0 1px 4px 0 rgb(0 0 0 / 13%);border: 1px solid transparent;padding: 0 16px 16px;"
          >
            <h3>执行结果</h3>
            <el-alert
              v-if="res.code === 200"
              :title="res.message"
              type="success"
              effect="dark"
              :closable="false"
              style="margin-bottom: 16px;"
            ></el-alert>
            <div>
              🏄‍
              <span style="margin-left: 8px;">Thanks for using Serverless-Devs.</span>
            </div>
            <div>
              👉
              <span
                style="margin-left: 8px;"
              >You could enjoy your serverless journey!</span>
            </div>
            <div>
              🧭
              <span
                style="margin-left: 8px;"
              >If you need help for this example, you can use [s -h] after you enter folder.</span>
            </div>
            <div>
              💞‍
              <span style="margin-left: 8px;">
                Document ❤ Star：
                <span
                  style="color: #07a;"
                >https://github.com/Serverless-Devs/Serverless-Devs</span>
              </span>
            </div>
          </div>
        </el-col>
      </el-row>
    </div>
  </body>
  <script src="https://unpkg.com/axios/dist/axios.min.js"></script>

  <!-- import Vue before Element -->
  <script src="https://unpkg.com/vue/dist/vue.js"></script>
  <!-- import JavaScript -->
  <script src="https://unpkg.com/element-ui/lib/index.js"></script>

  <script>
  const port = <%- port %>;

  function request(options) {
      return axios({
          baseURL: `http://localhost:${port}`,
          ...options
      })
  }

  new Vue({
      el: '#app',
      data: function () {
          return {
              form: {},
              rules: {
                  access: [
                      {
                          required: true,
                          message: '请选择密钥',
                          trigger: 'change'
                      },
                  ],
              },
              res: {}
          }
      },
      computed:{
          templateKeys(){
              return <%- templateKeys %>
          },
          port(){
              return port
          },
           accessList(){
              return <%- accessList %>
          }
      },
      mounted() {
          console.log(this.templateKeys,'ss')
      },
      methods: {
          handleInit(){
              this.$refs.form.validate(async(valid) => {
                  if (valid) {
                        const sconfig = {};
                        const envconfig = {};
                        Object.keys(this.form).forEach(key=>{
                            const findObj = this.templateKeys.find(item=>item.name === key)
                            if (findObj.type === 's') {
                                sconfig[key] = this.form[key]
                            }
                            if(findObj.type === 'env'){
                                envconfig[key] = this.form[key]
                            }
                        })
                      console.log('submit!', this.form);
                    const {data}= await request({
                          url: '/api',
                          method: 'post',
                          data: {sconfig, envconfig}
                      })
                      this.res = data
                  } else {
                      console.log('error submit!!');
                      return false;
                  }
              });
          }
      }
  })
  </script>
</html>